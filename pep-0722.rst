PEP: 722
Title: Stricter Type Guards
Author: Rich Chiodo <rchiodo at microsoft.com>, Eric Traut <eric at traut.com>
Sponsor: <real name of sponsor>
PEP-Delegate: <PEP delegate's real name>
Discussions-To: https://github.com/python/typing/discussions/1013
Status: Draft
Type: Standards Track
Topic: Typing
Content-Type: text/x-rst
Created: 28-Jul-2023
Python-Version: 3.10
Post-History: 
Resolution: 


Abstract
========

This PEP further refines `TypeGuards <typeguards_>`__ to
indicate when negative type narrowing is deemed safe.

[I'd suggest mentioning PEP 647 explicitly here rather than having the opaque link. You can link to a PEP in RST using :pep:`647` ]
[I think more context is needed here for readers to understand what "negative" means. Maybe one sentence explaining what typeguards currently do and then another about the negative issue.]


Motivation
==========

`TypeGuards <typeguards_>`__ are used throughout python
libraries but cannot be used to determine the negative case:

[Again, more context is needed for the user to understand what "the negative case" means.]
[Also what does "determine the negative case" mean? Maybe something like "narrow the type in the negative case" would be more clear? Also see the use of that phrase below the code block.]
[python should be capitalized]

::
[I'm wondering if `::` is equivalent to `.. code-block:: python` -- You may need the latter to get proper colorization. Check after you build your RST to HTML.]

    def is_str(val: str | int) -> TypeGuard[str]:
        return isinstance(val, str)

    def func(val: str | int):
        if is_str(val):
            reveal_type(val) # str
        else:
            reveal_type(val) # str | int

This inability to determine the negative case makes ``TypeGuard`` not as useful as
it could be.

This PEP proposes that in cases where the output type is a *strict* subtype of
the input type, the negative case can be computed. This changes the example so
that the ``int`` case is possible:
["output type" -- might need to define this term or use something else. I don't see that term used in PEP 647.]
["This changes the example" -- maybe rephrase this to clarify that the code of the example is unchanged, but type checkers can interpret it differently?]
["is possible" seems pretty vague]
[What does strict subtype mean? And why is it italicized?]

::

    def is_str(val: str | int) -> TypeGuard[str]:
        return isinstance(val, str)

    def func(val: str | int):
        if is_str(val):
            reveal_type(val) # str
        else:
            reveal_type(val) # int

Since the output type is a *strict* subtype of the
input, a type checker can determine that the only possible type in the ``else`` is the
other input type(s).
["the other input type(s)" -- There's only one input type. It's a Union. Suggest rephrasing this. I'm not sure if talking about the types using set theory (input -- output) would make this more clear (or more generic) or worse.]

If the output type is not a *strict* subtype of the input type,
the negative cannot be assumed to be the intuitive opposite:
["intuitive opposite" -- opposite is the incorrect term here and I think intuition doesn't belong in a PEP :)]

::

    def is_str_list(val: list[int | str]) -> TypeGuard[list[str]]
        return all(isinstance(x, str) for x in val)

    def func(val: list[int | str]):
        if is_str_list(val):
            reveal_type(val) # list[str]
        else:
            reveal_type(val) # list[str | int] 

Since ``list`` is invariant, it doesn't have any subtypes, so type checkers 
can't narrow the type in the negative case.

Specification
=============

This PEP requires no new changes to the language. It is merely modifying the
definition of ``TypeGuard`` for type checkers. The runtime should already be
behaving in this way.
["should" -- "The runtime" sounds singular, so if you mean CPython alone, I'd remove "should". If you mean that all Python runtimes should be behaving this way, I'd clarify that.]

Existing ``TypeGuard`` usage may change though, as described below.


Backwards Compatibility
=======================

For preexisting code this should require no changes, but should simplify this
use case here:

:: 

    A = TypeVar("A")
    B = TypeVar("B")

    def is_A(x: A | B) -> TypeGuard[A]:
        raise NotImplementedError


    def after_is_A(x: A | B) -> TypeGuard[B]:
        return True


    def test(x: A | B):
        if is_A(x):
            reveal_type(x)
            return
        assert after_is_A(x)

        reveal_type(x)
        return

["after_is_A" is confusing me -- is there a better name? "is_not_A"?]
[Can/should you use PEP 695 syntax for the TypeVars?]

becomes this instead
["becomes this instead" is not a grammatically correct continuation of the sentence before the first code block. Maybe rephrase the sentence to "Preexisting code should require no changes, but code like this...can be simplified to this:"]
[Add comments in these code blocks showing the expected inferred type as you did above? I think then you won't need the reveal_type calls?]

::

    A = TypeVar("A")
    B = TypeVar("B")

    def is_A(x: A | B) -> TypeGuard[A]:
        return isinstance(x, A)


    def test(x: A | B):
        if is_A(x):
            reveal_type(x)
            return
        reveal_type(x)
        return


How to Teach This
=================

The belief is that new users will assume this is how ``TypeGuard`` works in the
first place. Meaning this change should make ``TypeGuard`` easier to teach.


Reference Implementation
========================

A reference implementation of this idea exists in Pyright.
[Would there be value in pointing the reader to the implementation?]


Rejected Ideas
==============

Originally a new ``StrictTypeGuard`` construct was proposed. A
``StrictTypeGuard`` would be similar to to a ``TypeGuard`` except it would
explicitly state that output type was a subtype of the input type. Type checkers
would validate that the output type was a subtype of the input type.

See this comment: `StrictTypeGuard proposal <https://github.com/python/typing/discussions/1013#discussioncomment-1966238>`__

This was rejected because for most cases it's not necessary. Most people assume
the negative case for ``TypeGuard`` anyway, so why not just change the specification
to match their assumptions?

Footnotes
=========
.. _typeguards: https://peps.python.org/pep-0647/

Copyright
=========

This document is placed in the public domain or under the CC0-1.0-Universal
license, whichever is more permissive.